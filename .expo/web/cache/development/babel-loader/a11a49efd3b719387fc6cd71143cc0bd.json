{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport defaultMessages from \"./defaultMessages\";\nimport defaultRules from \"./defaultRules\";\n\nvar ValidationComponent = function (_Component) {\n  _inherits(ValidationComponent, _Component);\n\n  var _super = _createSuper(ValidationComponent);\n\n  function ValidationComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ValidationComponent);\n\n    _this = _super.call(this, props);\n    _this.errors = [];\n    _this.deviceLocale = props.deviceLocale || 'en';\n    _this.rules = props.rules || defaultRules;\n    _this.messages = props.messages || defaultMessages;\n    _this.labels = props.labels || {};\n    _this.state = {\n      error: false\n    };\n    return _this;\n  }\n\n  _createClass(ValidationComponent, [{\n    key: \"validate\",\n    value: function validate(fields) {\n      this._resetErrors();\n\n      for (var _i = 0, _Object$keys = Object.keys(this.state); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        var rules = fields[key];\n\n        if (rules) {\n          this._checkRules(key, rules, this.state[key]);\n        }\n      }\n\n      ;\n      return this.isFormValid();\n    }\n  }, {\n    key: \"_checkRules\",\n    value: function _checkRules(fieldName, rules, value) {\n      if (!value && !rules.required) {\n        return;\n      }\n\n      for (var _i2 = 0, _Object$keys2 = Object.keys(rules); _i2 < _Object$keys2.length; _i2++) {\n        var key = _Object$keys2[_i2];\n        var isRuleFn = typeof this.rules[key] == \"function\";\n        var isRegExp = this.rules[key] instanceof RegExp;\n\n        if (isRuleFn && !this.rules[key](rules[key], value) || isRegExp && !this.rules[key].test(value)) {\n          this._addError(fieldName, key, rules[key], isRuleFn);\n        }\n      }\n    }\n  }, {\n    key: \"_addError\",\n    value: function _addError(fieldName, rule, value, isFn) {\n      var name = this.labels[fieldName];\n      value = rule == 'minlength' ? value - 1 : value;\n      var errMsg = this.messages[this.deviceLocale][rule].replace(\"{0}\", name || fieldName).replace(\"{1}\", value);\n\n      var _this$errors$filter = this.errors.filter(function (err) {\n        return err.fieldName === fieldName;\n      }),\n          _this$errors$filter2 = _slicedToArray(_this$errors$filter, 1),\n          error = _this$errors$filter2[0];\n\n      if (error) {\n        var index = this.errors.indexOf(error);\n        error.messages.push(errMsg);\n        error.failedRules.push(rule);\n        this.errors[index] = error;\n      } else {\n        this.errors.push({\n          fieldName: fieldName,\n          failedRules: [rule],\n          messages: [errMsg]\n        });\n      }\n\n      this.setState({\n        error: true\n      });\n    }\n  }, {\n    key: \"_resetErrors\",\n    value: function _resetErrors() {\n      this.errors = [];\n      this.setState({\n        error: false\n      });\n    }\n  }, {\n    key: \"isFieldInError\",\n    value: function isFieldInError(fieldName) {\n      return this.errors.filter(function (err) {\n        return err.fieldName === fieldName;\n      }).length > 0;\n    }\n  }, {\n    key: \"isFormValid\",\n    value: function isFormValid() {\n      return this.errors.length == 0;\n    }\n  }, {\n    key: \"getFailedRules\",\n    value: function getFailedRules() {\n      var failedRulesPerField = {};\n\n      for (var index = 0; index < this.errors.length; index++) {\n        var error = this.errors[index];\n        failedRulesPerField[error.fieldName] = error.failedRules;\n      }\n\n      return failedRulesPerField;\n    }\n  }, {\n    key: \"getFailedRulesInField\",\n    value: function getFailedRulesInField(fieldName) {\n      var foundError = this.errors.find(function (err) {\n        return err.fieldName === fieldName;\n      });\n\n      if (!foundError) {\n        return [];\n      }\n\n      return foundError.failedRules;\n    }\n  }, {\n    key: \"getErrorMessages\",\n    value: function getErrorMessages() {\n      var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\\n\";\n      return this.errors.map(function (err) {\n        return err.messages.join(separator);\n      }).join(separator);\n    }\n  }, {\n    key: \"getErrorsInField\",\n    value: function getErrorsInField(fieldName) {\n      var foundError = this.errors.find(function (err) {\n        return err.fieldName === fieldName;\n      });\n\n      if (!foundError) {\n        return [];\n      }\n\n      return foundError.messages;\n    }\n  }]);\n\n  return ValidationComponent;\n}(Component);\n\nexport { ValidationComponent as default };\nValidationComponent.propTypes = {\n  deviceLocale: PropTypes.string,\n  rules: PropTypes.object,\n  messages: PropTypes.object,\n  labels: PropTypes.object\n};\nValidationComponent.defaultProps = {\n  deviceLocale: 'en',\n  rules: defaultRules,\n  messages: defaultMessages,\n  labels: {}\n};","map":{"version":3,"sources":["/Users/tejasoberoi/Desktop/class-51-Reference-Code/node_modules/react-native-form-validator/index.js"],"names":["PropTypes","Component","defaultMessages","defaultRules","ValidationComponent","props","errors","deviceLocale","rules","messages","labels","state","error","fields","_resetErrors","Object","keys","key","_checkRules","isFormValid","fieldName","value","required","isRuleFn","isRegExp","RegExp","test","_addError","rule","isFn","name","errMsg","replace","filter","err","index","indexOf","push","failedRules","setState","length","failedRulesPerField","foundError","find","separator","map","join","propTypes","string","object","defaultProps"],"mappings":"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","sourcesContent":["'use strict';\n\nimport PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport defaultMessages from './defaultMessages';\nimport defaultRules from './defaultRules';\n\nexport default class ValidationComponent extends Component {\n\n  constructor(props) {\n      super(props);\n      // array to store error on each fields\n      // ex:\n      // [{ fieldName: \"name\", messages: [\"The field name is required.\"] }]\n      this.errors = [];\n      // Retrieve props\n      this.deviceLocale = props.deviceLocale || 'en'; // ex: en, fr\n      this.rules = props.rules || defaultRules; // rules for Validation\n      this.messages = props.messages || defaultMessages;\n      this.labels = props.labels || {};\n      this.state = { error: false };\n  }\n\n  /*\n  * Method validate to verify if each children respect the validator rules\n  * Fields example (Array) :\n  * fields = {\n  *  input1: {\n  *    required:true,\n  *     numbers:true,\n  *     maxLength:5\n  *  }\n  *}\n  */\n  validate(fields) {\n    // Reset errors\n    this._resetErrors();\n    // Iterate over inner state\n    for (const key of Object.keys(this.state)) {\n      // Check if child name is equals to fields array set up in parameters\n      const rules = fields[key];\n      if (rules) {\n        // Check rule for current field\n        this._checkRules(key, rules, this.state[key]);\n      }\n    };\n    return this.isFormValid();\n  }\n\n  // Method to check rules on a spefific field\n  _checkRules(fieldName, rules, value) {\n    if (!value && !rules.required ) {\n      return; // if value is empty AND its not required by the rules, no need to check any other rules\n    }\n    for (const key of Object.keys(rules)) {\n      const isRuleFn = (typeof this.rules[key] == \"function\");\n      const isRegExp = (this.rules[key] instanceof RegExp);\n      if ((isRuleFn && !this.rules[key](rules[key], value)) || (isRegExp && !this.rules[key].test(value))) {\n        this._addError(fieldName, key, rules[key], isRuleFn);\n      }\n    }\n  }\n\n  // Add error\n  // ex:\n  // [{ fieldName: \"name\", messages: [\"The field name is required.\"] }]\n  _addError(fieldName, rule, value, isFn) {\n    const name = this.labels[fieldName];\n    value = rule == 'minlength'? value-1 : value;\n    const errMsg = this.messages[this.deviceLocale][rule].replace(\"{0}\", name || fieldName).replace(\"{1}\", value);\n    let [error] = this.errors.filter(err => err.fieldName === fieldName);\n    // error already exists\n    if (error) {\n      // Update existing element\n      const index = this.errors.indexOf(error);\n      error.messages.push(errMsg);\n      error.failedRules.push(rule);\n      this.errors[index] = error;\n    } else {\n      // Add new item\n      this.errors.push({\n        fieldName,\n        failedRules: [rule],\n        messages: [errMsg]\n      });\n    }\n    this.setState({ error: true });\n  }\n\n  // Reset error fields\n  _resetErrors() {\n    this.errors = [];\n    this.setState({ error: false });\n  }\n\n  // Method to check if the field is in error\n  isFieldInError(fieldName) {\n    return (this.errors.filter(err => err.fieldName === fieldName).length > 0);\n  }\n\n  isFormValid() {\n    return this.errors.length == 0;\n  }\n\n  // Return an object where the keys are the field names and the value is an array with the rules that failed validation\n  getFailedRules() {\n    let failedRulesPerField = {}\n    for (let index = 0; index < this.errors.length; index++) {\n      let error = this.errors[index];\n      failedRulesPerField[error.fieldName] = error.failedRules\n    }\n    return failedRulesPerField\n  }\n\n  // Return the rules that failed validation for the given field\n  getFailedRulesInField(fieldName) {\n    const foundError = this.errors.find(err => err.fieldName === fieldName)\n    if (!foundError) {\n      return []\n    }\n    return foundError.failedRules\n  }\n\n  // Concatenate each error messages\n  getErrorMessages(separator=\"\\n\") {\n    return this.errors.map((err) => err.messages.join(separator)).join(separator);\n  }\n\n  // Method to return errors on a specific field\n  getErrorsInField(fieldName) {\n    const foundError = this.errors.find(err => err.fieldName === fieldName)\n    if (!foundError) {\n      return []\n    }\n    return foundError.messages\n  }\n}\n\n// PropTypes for component\nValidationComponent.propTypes = {\n  deviceLocale: PropTypes.string, // Used for language locale\n  rules: PropTypes.object, // rules for validations\n  messages: PropTypes.object, // messages for validation errors\n  labels: PropTypes.object, // labels for validation messages\n\n}\n// DefaultProps for component\nValidationComponent.defaultProps = {\n  deviceLocale: 'en',\n  rules: defaultRules,\n  messages: defaultMessages,\n  labels: {}\n};\n"]},"metadata":{},"sourceType":"module"}